# vim: ft=ansible
- name: Bootstrap proxmox
  hosts: proxmox
  become: true
  tasks:
    - name: Create .ssh directory for user root
      file:
        path: /root/.ssh
        state: directory

    - name: Generate root ssh keys
      openssh_keypair:
        path: /root/.ssh/id_rsa
        size: 4096
        comment: "proxmox-cluster-{{ inventory_hostname }}"
      register: ssh_keypair

    - name: Recover sshd public keys
      slurp:
        path: "/etc/ssh/{{ item }}.pub"
      loop:
        - ssh_host_ecdsa_key
        - ssh_host_ed25519_key
        - ssh_host_rsa_key
      register: sshd_publickeys

    - name: Authorize other cluster nodes ssh keys
      authorized_key:
        user: root
        state: present
        key: "{{ hostvars[item].ssh_keypair.public_key }}"
      loop: "{{ groups['proxmox'] }}"

    - name: Trust ssh public keys for other nodes (public ips)
      known_hosts:
        path: /root/.ssh/known_hosts
        hash_host: false
        name: "{{ hostvars[item[0]].pve_public_ip }}"
        # terrible one-liner
        key: "{{ hostvars[item[0]].pve_public_ip }} {{ hostvars[item[0]].sshd_publickeys.results[item[1]].content | b64decode }}"
      # iterating over 0,1,2 to get the 3 public keys, edcda, rsa, ed25519
      loop: "{{ groups['proxmox'] | product([0,1,2]) | list }}"

    - name: Trust ssh public keys for other nodes (private ips)
      known_hosts:
        path: /root/.ssh/known_hosts
        hash_host: false
        name: "{{ hostvars[item[0]].internal_ip }}"
        # terrible one-liner
        key: "{{ hostvars[item[0]].internal_ip }} {{ hostvars[item[0]].sshd_publickeys.results[item[1]].content | b64decode }}"
      # iterating over 0,1,2 to get the 3 public keys, edcda, rsa, ed25519
      loop: "{{ groups['proxmox'] | product([0,1,2]) | list }}"

    - name: Remove PVE-entreprise.list
      file:
        path: /etc/apt/sources.list.d/pve-enterprise.list
        state: absent

    - name: Add gpg
      apt:
        name: gnupg2
        state: present
        update_cache: true

    - name: Log default ipv4
      debug:
        msg: "{{ ansible_default_ipv4 }}"

    - name: Log all ip addresses
      debug:
        msg: "{{ ansible_all_ipv4_addresses }}"

    - name: Add DNS entry to hostfile
      template:
        src: hosts.j2
        dest: /etc/hosts

    - name: Add PGP key
      apt_key:
        url: http://download.proxmox.com/debian/proxmox-ve-release-6.x.gpg
        state: present

    - name: Add sources.list
      apt_repository:
        repo: "deb http://download.proxmox.com/debian/pve buster pve-no-subscription"
        filename: pve-install-repo

    - name: Perform full upgrade
      apt:
        upgrade: full

    - name: Install proxmox
      apt:
        name:
          - proxmox-ve
          - postfix
          - open-iscsi
        state: present

    - name: Remove PVE-entreprise.lisr
      file:
        path: /etc/apt/sources.list.d/pve-enterprise.list
        state: absent

    - name: Remove os-prober
      apt:
        name: os-prober
        state: absent

- name: Clusterize PVEs
  hosts: proxmox
  serial: 1
  become: true
  tasks:
    - name: Initializes cluster
      command:
        argv:
         - pvecm
         - create
         - "{{ pve_cluster_name }}"
        creates: /etc/pve/corosync.conf
      when: "'pve_first_node' in group_names"

    - name: Join cluster
      command:
        argv:
          - pvecm
          - add
          - "{{ hostvars[groups['pve_first_node'][0]].pve_public_ip }}"
          - "-use_ssh"
        creates: /etc/pve/corosync.conf
      when: "'pve_first_node' not in group_names"
  tags:
    - pve-cluster
    - proxmox

- name: Configure network (wireguard)
  hosts: proxmox
  tasks:
    - name: Apt pin unstable
      blockinfile:
        path: /etc/apt/preferences.d/limit-unstable
        block: |
          Package: *
          Pin: release a=unstable
          Pin-Priority: 90
        create: true

    - name: Add unstable source for wireguard
      apt_repository:
        repo: "deb http://deb.debian.org/debian/ unstable main"
        filename: unstable-wireguard

    - name: Install wireguard
      apt:
        name:
          - pve-headers
          - wireguard
        state: present

    # TODO : put reboot stuff here

    - name: Generate wireguard privatekey
      shell: "wg genkey > {{ wg_private_key_path }}"
      args:
        creates: "{{ wg_private_key_path }}"
      notify: generate wireguard publickey

    - name: Generate public keys if needed
      meta: flush_handlers

    - name: Read privatekey
      slurp:
        src: "{{ wg_private_key_path }}"
      register: wg_private_key

    - name: Read publickey
      slurp:
        src: "{{ wg_public_key_path }}"
      register: wg_public_key

    - name: generate wg0.conf
      template:
        src: wg0.conf.j2
        dest: /etc/wireguard/wg0.conf
        owner: root
        group: root
        mode: 0600

    - name: Install dnsmasq
      apt:
        name: dnsmasq
        state: present
      environment:
        RUNLEVEL: 1

    - name: Deploy dnsmasq.conf
      template:
        src: dnsmasq.conf.j2
        dest: /etc/dnsmasq.conf
        owner: root
        group: root
        mode: 0640
      notify: restart dnsmasq

    - name: Ensure dnsmasq is started
      service:
        name: dnsmasq
        state: started

    - name: Insert/Update vmbr0 configuration stanza in /etc/network/interfaces
      blockinfile:
        path: /etc/network/interfaces
        block: |
          auto vmbr0
          #private sub network
          iface vmbr0 inet static
                  address  {{ internal_ip }}
                  netmask  255.255.255.0
                  bridge_ports none
                  bridge_stp off
                  bridge_fd 0

                  post-up echo 1 > /proc/sys/net/ipv4/ip_forward
                  post-up   iptables -t nat -A POSTROUTING -s '{{ internal_net }}' -o {{ nat_interface }} -j MASQUERADE
                  post-up   wg-quick up wg0
                  post-down   iptables -t nat -D POSTROUTING -s '{{ internal_net }}' -o {{ nat_interface }} -j MASQUERADE
                  post-down   wg-quick down wg0
      notify: reload vmbr0
      # beware, it will disconnect all running containers and VMs from the network
  handlers:
    - name: reload vmbr0
      command: "ifup vmbr0"
    - name: generate wireguard publickey
      shell: "wg pubkey < {{ wg_private_key_path }} > {{ wg_public_key_path }}"
    - name: restart dnsmasq
      service:
        name: dnsmasq
        state: restarted
  tags:
    - pve-network
    - proxmox


- name: Configure service-discovery (consul)
  hosts: proxmox
  serial: 1
  roles:
    - service_discovery
  tags:
    - service-discovery

- name: Configure incoming traffic (fabio)
  hosts: proxmox
  roles:
    - fabiolb
  tags:
    - ingress
    - fabio

    # - name: Configure incoming traffic (haproxy & dnsmasq)
    #   hosts: proxmox
    #   roles:
    #     - ingress
    #   tags:
    #     - ingress

- name: Create containers
  hosts: proxmox
  tasks:
    - name: List present container templates
      command:
        argv:
          - pveam
          - list
          - local
      register: local_templates
      changed_when: false

    - name: List available containe templates
      command:
        argv:
          - pveam
          - available
          - "-section"
          - system
      register: available_templates
      changed_when: false

    - name: Parse available images to get latest debian 10
      set_fact:
        proxmox_container_debian: '{{ available_templates.stdout_lines|
                                      select("search", ".*debian-10.*-standard.*")|
                                      list|first }}'

    - name: Clean available image name
      set_fact:
        proxmox_container_debian: "{{ proxmox_container_debian.split()|last }}"

    - name: Download debian 10 container if not here
      command:
        argv:
          - pveam
          - download
          - local
          - "{{ proxmox_container_debian }}"
      when: local_templates.stdout_lines | select("search", proxmox_container_debian) | list | length == 0
